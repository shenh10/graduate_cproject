## Byzantine Problem 实验报告

本实验实现了教材11章的算例1, 分别使用了Dolev算法，快速收敛算法(FCA)，传感器融合算法以及混合算法。

重要概念：
Agreement: 所有non-faulty PE都收敛到彼此之间epsilon范围内(即| max(V) - min(V）| < epsilon)
Validity: 迭代过程中的值必须始终在non-faulty PE初始值的范围内
Accuracy: 系统结果与期望结果的距离
Precision: 系统返回结果的范围大小
Accuracy(Mahaney):与被估计的abstract value的距离 
Accuracy(Dolev): 任意两个PE的初始精确值最大距离

要求：
Precision < epsilon
Accuracy < delta

目标是在不损害accuracy的前提下尽可能提升精度的大小, 返回结果的accuracy不能比正确PE的初始值中最差的accuracy还差
Byzantine将军问题中，我们希望最多容忍t个fault PE，则PE总数至少为3t+1,从accuracy角度说，至多有 t个PE返回值超出了delta

Dolev的思路即是，至多有t个低于delta下界，至多有t个高于delta上界，则去头去尾至少有t+1个在delta accuracy范围内,取其子集求平均得到新值。给定任意小的精度范围，该算法都能收敛。

在Inexact agreement的Mahaney算法中，一个重要的概念是acceptable。 一个值是否acceptable取决于它是否在其他N-t个值的delta范围内。此算法也在给定任意小的精度范围都收敛，不过可能造成accuracy的损失。FCA是Mahaney给出的算法之一。

sensor fusion解决的基本问题是：给定N个传感器，所有都有有限的准确度，至多t个传感器是坏的，在多小的一个范围内我们一定可以找到正确值？整个问题和上述Byzantine Generals based 算法不一样，整个不需要定义个具体的Precision(epsilon)要求。每个传感器给定一个upper bound 和lower bound, 这个范围的大小即为accuracy delta。因此我们希望找到个足够小的范围，传感器的估计值才有意义。明显的，这个范围的大小要比任意一个PE的范围小。算法实现通过找到至少由N-t个传感器读数范围的交集，correct range则是这些交集的最宽上下界。


Hybrid 算法结合了FCA 算法和sensor fusion算法，使得提供了最好的Accuracy(由sensor fusion算法带来)
，同时提升了Precision.

该算法适用于三种数据
1.实数值，所有PE有一样的隐含Accuracy; 
2.实数值，有显示accuracy但随着value而改变
3.一个包含上下界的范围

比较几种算法:
1. Approximate agreement 和 Inexact agreement 都强调精度而不考虑accuracy, 使得迭代过程中accuracy还可能下降，所以这个算法更适用于需要所有PE同步的应用中，比如时钟同步——时间绝对值不那么重要，关键是分布式节点要一致。
2. Sensor fusion则只考虑 accuracy, Approximate agreement可以达到任意precison要求，可是inexact agreement 对accuracy的要求使得迭代在某个阶段进行不下去，故无法收敛到任意小的precison。
3. 没有加Byzantine Agreement步骤所需的带宽与processor数成正比， 加上Byzantine O(n**(S+1)), S是Byzantine Agreement迭代次数
4. FCA 和 sensor fusion 都是O(nlgn)时间复杂度


#### 实验结果:
##### Dolev:
收敛条件: 两次迭代值变化小于0.001
Dolev Algorithm
    2.6000    2.1333    2.4333    2.1333    2.1333

    2.3889    2.2333    2.3556    2.2333    2.2333

    2.3259    2.2741    2.3259    2.2741    2.2741

    2.3086    2.2914    2.3086    2.2914    2.2914

    2.3029    2.2971    2.3029    2.2971    2.2971

    2.3010    2.2990    2.3010    2.2990    2.2990

    2.3003    2.2997    2.3003    2.2997    2.2997



